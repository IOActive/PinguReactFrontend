# Copyright 2024 IOActive
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import Platforms from '../helpers/Platforms';

export const Fuzzer = (json) => {
    return {
        id: {
            value: json.id,
            editable: false,
            header: "UUID",
            type: String,
            required: false,
        },
        timestamp: {
            value: new Date(json.timestamp),
            editable: false,
            header: "Last update time",
            type: Date,
        },
        name: {
            value: json.name,
            editable: true,
            header: "The name of the fuzzer",
            type: String,
            required: true,
        },
        fuzzer_zip: {
            value: (json.fuzzer_zip != null) ? json.fuzzer_zip.substring(1): null,
            editable: true,
            header: "The fuzzer archive that the user uploaded",
            type: File,
            required: true,
        },
        filename: {
            value: json.filename,
            editable: true,
            header: "The name of the archive that the user uploaded",
            type: String,
            required: false,
        },
        file_size: {
            value: json.file_size,
            editable: false,
            header: "The size of the archive that the user uploaded",
            type: Number,
            required: false,
        },
        blobstore_path: {
            value: json.blobstore_path,
            editable: true,
            header: "The path to the archive in the blobstore",
            type: String,
            required: false,
        },
        executable_path: {
            value: json.executable_path,
            editable: true,
            header: "Fuzzer's main executable path, relative to root",
            type: String,
            required: false,
        },
        revision: {
            value: json.revision,
            editable: true,
            header: "The revision of the fuzzer",
            type: Number,
            required: false,
        },
        timeout: {
            value: json.timeout,
            editable: false,
            header: "Last Testcase timeout",
            type: Number,
            require : false,
        },
        supported_platforms: {
            value: Platforms[json.supported_platforms],
            editable: true,
            header: "The platforms that the fuzzer supports",
            type: Object,
            required: true,
        },
        launcher_script: {
            value: json.launcher_script,
            editable: true,
            header: "Custom script that should be used to launch chrome for this fuzzer",
            type: String,
            required: false,    
        },
        result: {
            value: json.result,
            editable: false,
            header: "Result from the last fuzzer run showing the number of testcases generated",
            type: String,
            required: false,
        },
        result_timestamp: {
            value: new Date(json.result_timestamp),
            editable: false,
            header: " Last result update timestamp",
            type: Date,
            required: false,
        },
        console_output: {
            value: json.console_output,
            editable: false,
            header: "The console output from the last fuzzer run",
            type: String,
            required: false,
        },
        return_code: {
            value: json.return_code,
            editable: false,
            header: "The return code from the last fuzzer run",
            type: Number,
            require : false,
        },
        sample_testcase: {
            value: json.sample_testcase,
            editable: false,
            header: "Blobstore key for the sample testcase generated by the fuzzer",
            type: String,
            required: false,
        },
        max_testcases: {
            value: json.max_testcases,
            editable: true,
            header: "The maximum number of testcases that the fuzzer should generate",
            type: Number,
            required: false,
        },
        additional_environment_string: {
            value: json.additional_environment_string,
            editable: true,
            header: "Additional environment variables that should be set when running the fuzzer",
            type: String,
            required: false,
        },
        stats_columns: {
            value: json.stats_columns,
            editable: false,
            header: "The columns that should be displayed in the stats table",
            type: Object,
            required: false,
        },
        stats_column_descriptions: {
            value: json.stats_column_descriptions,
            editable: false,
            header: "The descriptions of the columns that should be displayed in the stats table",
            type: Object,
            required: false,
        },
        builtin: {
            value: json.builtin === true,
            editable: true,
            header: "Whether the fuzzer is built-in or not",
            type: Boolean,
            required: false,
        },
        differential: {
            value: json.differential === true,
            editable: true,
            header: "Whether the fuzzer is differential or not",
            type: Boolean,
            required: false,
        },
        has_large_testcases: {
            value: json.has_large_testcases === true,
            editable: true,
            header: "Whether the fuzzer has large testcases or not",
            type: Boolean,
            required: false,
        },
        data_bundle_name: {
            value: json.data_bundle_name,
            editable: true,
            header: "The name of the data bundle that should be used for this fuzzer",
            type: String,
            required: false,
        },
        validated: false,
        submitted: false,
        get_enums: () => {
            return {
                supported_platforms: Platforms
            };
        },
        get_payload: (fuzzer) => {
            let payload = {};
            for (let key in fuzzer) {
                if (fuzzer[key].editable) {
                    if (key === "fuzzer_zip")
                        payload[key] = fuzzer[key].value.split(",").pop();
                    else
                        payload[key] = fuzzer[key].value;
                }
            }
            return payload;
        }
    };
};